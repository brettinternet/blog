{"version":3,"sources":["webpack:///./src/components/Utterances.js","webpack:///./src/templates/blog-post.js","webpack:///./src/images/icons/twitter.svg"],"names":["Utterances","repo","theme","issueTerm","label","rootElm","useRef","useEffect","utterances","document","createElement","utterancesConfig","src","crossorigin","async","Object","keys","forEach","configKey","setAttribute","current","appendChild","id","ref","defaultProps","BlogPostTemplate","render","this","props","location","data","post","markdownRemark","site","siteMetadata","siteRepo","postBasePath","pageContext","previous","next","slug","frontmatter","title","description","date","tags","Layout","headProps","excerpt","Section","thin","Tag","noBackground","textMuted","mRight","style","paddingLeft","Title","Body","dangerouslySetInnerHTML","__html","html","Tags","length","map","tag","key","to","kebabCase","themed","PostActions","href","Dot","height","NavButton","buttons","dir","rel","fields","name","css","ThemeContext","Consumer","React","Component","pageQuery","styled","h1","div","serifFont","themePrimary","media","xs","span","Twitter","module","exports","default"],"mappings":"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","file":"component---src-templates-blog-post-js-af4ae604ab19d3f3c12d.js","sourcesContent":["import React, { useEffect, useRef } from \"react\"\r\nimport PropTypes from \"prop-types\"\r\n\r\nconst src = \"https://utteranc.es/client.js\"\r\nconst elementId = \"utterances\"\r\n\r\nconst Utterances = ({ repo, theme, issueTerm, label }) => {\r\n  const rootElm = useRef(null)\r\n\r\n  useEffect(() => {\r\n    const utterances = document.createElement(\"script\")\r\n    const utterancesConfig = {\r\n      src,\r\n      repo,\r\n      \"issue-term\": issueTerm,\r\n      theme: `github-${theme}`,\r\n      label,\r\n      crossorigin: \"anonymous\",\r\n      async: true,\r\n    }\r\n\r\n    Object.keys(utterancesConfig).forEach(configKey => {\r\n      utterances.setAttribute(configKey, utterancesConfig[configKey])\r\n    })\r\n    rootElm.current.appendChild(utterances)\r\n  }, [])\r\n\r\n  return <div id={elementId} ref={rootElm} />\r\n}\r\n\r\nUtterances.propTypes = {\r\n  repo: PropTypes.string.isRequired,\r\n  theme: PropTypes.oneOf([\"light\", \"dark\"]),\r\n  issueTerm: PropTypes.oneOfType([\r\n    PropTypes.string,\r\n    PropTypes.oneOf([\"pathname\", \"og:title\", \"title\", \"url\"]),\r\n  ]),\r\n  label: PropTypes.string,\r\n}\r\n\r\nUtterances.defaultProps = {\r\n  theme: \"light\",\r\n}\r\n\r\nexport default Utterances\r\n","import React from \"react\"\r\nimport { graphql } from \"gatsby\"\r\nimport styled from \"styled-components\"\r\nimport ThemeContext from \"components/ThemeContext\"\r\nimport { media } from \"utils/mixins\"\r\n\r\nimport Layout from \"components/Layout\"\r\nimport Section from \"components/Section\"\r\nimport A from \"components/Link\"\r\nimport Tag from \"components/Tag\"\r\nimport TwitterSvg from \"images/icons/twitter.svg\"\r\nimport NavButton from \"components/NavButton\"\r\nimport Utterances from \"components/Utterances\"\r\n\r\nimport { serifFont } from \"utils/mixins\"\r\nimport { kebabCase } from \"utils/string\"\r\n\r\nclass BlogPostTemplate extends React.Component {\r\n  render() {\r\n    const { location, data } = this.props\r\n    const post = data.markdownRemark\r\n    const { siteRepo, postBasePath, utterances } = data.site.siteMetadata\r\n    const { previous, next, slug } = this.props.pageContext\r\n    const { title, description, date, tags } = post.frontmatter\r\n\r\n    return (\r\n      <Layout\r\n        location={location}\r\n        headProps={{\r\n          title,\r\n          description: description || post.excerpt,\r\n        }}\r\n      >\r\n        <Section thin>\r\n          <div>\r\n            <Tag\r\n              noBackground\r\n              textMuted\r\n              mRight=\"1rem\"\r\n              style={{ paddingLeft: 0 }}\r\n            >\r\n              {date}\r\n            </Tag>\r\n          </div>\r\n          <Title>{title}</Title>\r\n          <Body>\r\n            <div dangerouslySetInnerHTML={{ __html: post.html }} />\r\n          </Body>\r\n\r\n          <Tags>\r\n            {tags &&\r\n              tags.length &&\r\n              tags.map(tag => (\r\n                <A key={tag} to={`/tags/${kebabCase(tag)}`}>\r\n                  <Tag themed mRight=\"0.5rem\">\r\n                    {tag}\r\n                  </Tag>\r\n                </A>\r\n              ))}\r\n          </Tags>\r\n\r\n          <PostActions>\r\n            <div>\r\n              <Dot\r\n                css={`\r\n                  margin-left: 0;\r\n                `}\r\n              >\r\n                >\r\n              </Dot>\r\n              <A href={`${siteRepo}/edit/source/content/blog${slug}index.md`}>\r\n                Edit on GitHub\r\n              </A>\r\n\r\n              <Dot>Â·</Dot>\r\n              <A\r\n                href={`https://twitter.com/home?status=${location.href}`}\r\n                title=\"Tweet post\"\r\n              >\r\n                <TwitterSvg height=\"12\" />\r\n              </A>\r\n            </div>\r\n\r\n            <NavButton\r\n              buttons={[\r\n                ...(previous\r\n                  ? {\r\n                      dir: \"backward\",\r\n                      rel: \"prev\",\r\n                      to: (postBasePath || \"\") + previous.fields.slug,\r\n                      name: previous.frontmatter.title,\r\n                      css: `font-size: 13px;`,\r\n                    }\r\n                  : []),\r\n                ...(next\r\n                  ? {\r\n                      dir: \"forward\",\r\n                      rel: \"next\",\r\n                      to: (postBasePath || \"\") + next.fields.slug,\r\n                      name: next.frontmatter.title,\r\n                      css: `font-size: 13px;`,\r\n                    }\r\n                  : []),\r\n              ]}\r\n            />\r\n          </PostActions>\r\n        </Section>\r\n\r\n        <hr />\r\n\r\n        <Section>\r\n          {utterances && (\r\n            <ThemeContext.Consumer>\r\n              {theme => (\r\n                <Utterances\r\n                  repo={utterances.repo}\r\n                  issueTerm=\"pathname\"\r\n                  label={utterances.label}\r\n                  theme={theme}\r\n                />\r\n              )}\r\n            </ThemeContext.Consumer>\r\n          )}\r\n        </Section>\r\n      </Layout>\r\n    )\r\n  }\r\n}\r\n\r\nexport default BlogPostTemplate\r\n\r\nexport const pageQuery = graphql`\r\n  query BlogPostBySlug($slug: String!) {\r\n    site {\r\n      siteMetadata {\r\n        siteRepo\r\n        postBasePath\r\n        utterances {\r\n          repo\r\n          label\r\n        }\r\n      }\r\n    }\r\n    markdownRemark(fields: { slug: { eq: $slug } }) {\r\n      id\r\n      excerpt(pruneLength: 160, format: PLAIN)\r\n      html\r\n      frontmatter {\r\n        title\r\n        date(formatString: \"MMMM DD, YYYY\")\r\n        tags\r\n      }\r\n    }\r\n  }\r\n`\r\n\r\nconst Title = styled.h1`\r\n  margin: 0.25em 0 0.5em 0;\r\n`\r\n\r\nconst Body = styled.div`\r\n  ${serifFont};\r\n\r\n  a {\r\n    color: ${props => props.theme.themePrimary};\r\n\r\n    &:hover {\r\n      text-decoration: underline;\r\n    }\r\n  }\r\n\r\n  img {\r\n    max-width: 125%;\r\n  }\r\n\r\n  line-height: 1.6;\r\n\r\n  h1,\r\n  h2,\r\n  h3,\r\n  h4,\r\n  h5,\r\n  h6 {\r\n    margin-top: 1.5em;\r\n    margin-bottom: 0.5em;\r\n  }\r\n\r\n  figcaption {\r\n    font-size: 0.7em;\r\n    text-align: center;\r\n    margin: auto;\r\n    font-style: italic;\r\n  }\r\n`\r\n\r\nconst Tags = styled.div`\r\n  a:hover {\r\n    text-decoration: none;\r\n  }\r\n`\r\n\r\nconst PostActions = styled.div`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  flex-wrap: nowrap;\r\n  align-items: center;\r\n  margin-top: 3em;\r\n  font-size: 13px;\r\n\r\n  a svg {\r\n    fill: currentColor;\r\n  }\r\n\r\n  & > ul {\r\n    display: none;\r\n\r\n    ${media.xs`\r\n      display: block;\r\n    `}\r\n  }\r\n`\r\n\r\nconst Dot = styled.span`\r\n  font-family: monospace;\r\n  margin: 0 0.5em;\r\n`\r\n","var React = require('react');\n\nfunction Twitter (props) {\n    return React.createElement(\"svg\",props,[React.createElement(\"title\",{\"key\":0},\"Twitter icon\"),React.createElement(\"path\",{\"d\":\"M23.954 4.569c-.885.389-1.83.654-2.825.775 1.014-.611 1.794-1.574 2.163-2.723-.951.555-2.005.959-3.127 1.184-.896-.959-2.173-1.559-3.591-1.559-2.717 0-4.92 2.203-4.92 4.917 0 .39.045.765.127 1.124C7.691 8.094 4.066 6.13 1.64 3.161c-.427.722-.666 1.561-.666 2.475 0 1.71.87 3.213 2.188 4.096-.807-.026-1.566-.248-2.228-.616v.061c0 2.385 1.693 4.374 3.946 4.827-.413.111-.849.171-1.296.171-.314 0-.615-.03-.916-.086.631 1.953 2.445 3.377 4.604 3.417-1.68 1.319-3.809 2.105-6.102 2.105-.39 0-.779-.023-1.17-.067 2.189 1.394 4.768 2.209 7.557 2.209 9.054 0 13.999-7.496 13.999-13.986 0-.209 0-.42-.015-.63.961-.689 1.8-1.56 2.46-2.548l-.047-.02z\",\"key\":1})]);\n}\n\nTwitter.defaultProps = {\"role\":\"img\",\"viewBox\":\"0 0 24 24\"};\n\nmodule.exports = Twitter;\n\nTwitter.default = Twitter;\n"],"sourceRoot":""}