{"componentChunkName":"component---src-templates-blog-post-js","path":"/blog/play-and-visual-spotify-music-in-terminal/","webpackCompilationHash":"3fd11feab51f89746e1f","result":{"data":{"site":{"siteMetadata":{"siteRepo":"https://github.com/brettinternet/brettinternet.github.io","postBasePath":"/blog","utterances":{"repo":"brettinternet/brettinternet.github.io","label":"ðŸ’¬ Comments"}}},"markdownRemark":{"id":"6735cf83-faff-597c-803a-d6a6467c3e0c","excerpt":"Like Winamp, ncmpcpp is timeless classic for music applications. As Iâ€™ve picked up my work and slowly moved into the command-line space, Iâ€™ve found ncmpcpp veryâ€¦","html":"<p>Like Winamp, ncmpcpp is timeless classic for music applications. As Iâ€™ve picked up my work and slowly moved into the command-line space, Iâ€™ve found ncmpcpp very easy to use. <a href=\"https://wiki.archlinux.org/index.php/ncmpcpp\">Ncmpcpp</a> is an mpd client and coupled with Mopidy I can browse Spotify playlists, search for artists, and play top tracks.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">brew install ncmpcpp</code></pre></div>\n<p>My latest endeavor with managing my music on the CLI has been to use a visualizer like <a href=\"https://github.com/dpayne/cli-visualizer\">cli-visualizer</a> or even ncmpcppâ€™s native visualization. Itâ€™s a fairly simple setup thatâ€™s been around for a while with a standard mpd and mpd client like ncmpcpp. However, to use an mpd client with a streaming service like Spotify or Soundcloud, you have to use a service like Mopidy.</p>\n<h2>Without Spotify</h2>\n<p>If you donâ€™t stream music, youâ€™re able to stick with a normal <a href=\"https://wiki.archlinux.org/index.php/Music_Player_Daemon\">mpd</a> setup.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">brew install mpd</code></pre></div>\n<p>Using a Music Player Daemon to serve audio has been around for a while, so I wonâ€™t get into this. The final config should look something like <a href=\"https://github.com/brettinternet/dotfiles/blob/master/.mpd/mpd.conf\">this</a>. Make sure you setup the entire config correctly, however, Iâ€™ll highlight a key element here: the two audio outputs. The visualizers both in ncmpcpp and in cli-visualizer need the <code class=\"language-text\">fifo</code> audio output to work:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">audio_output <span class=\"token punctuation\">{</span>\n  <span class=\"token builtin class-name\">type</span>                  <span class=\"token string\">\"fifo\"</span>\n  name                  <span class=\"token string\">\"my_fifo\"</span>\n  path                  <span class=\"token string\">\"/tmp/mpd.fifo\"</span>\n  <span class=\"token function\">format</span>                <span class=\"token string\">\"44100:16:2\"</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>And macOS uses CoreAudio for itâ€™s sound hardware output, so weâ€™ll add another output:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">audio_output <span class=\"token punctuation\">{</span>\n  <span class=\"token builtin class-name\">type</span>                  <span class=\"token string\">\"osx\"</span>\n  name                  <span class=\"token string\">\"CoreAudio\"</span>\n  mixer_type            <span class=\"token string\">\"software\"</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>With Spotify</h2>\n<p>Install <a href=\"https://github.com/mopidy\">Mopidy</a> and Mopidy-Spotify. They have additional plugins for other streaming services.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">brew install mopidy mopidy-spotify</code></pre></div>\n<p>Run <code class=\"language-text\">mopidy</code> once so the default config files are created. On macOS the config is <code class=\"language-text\">~/.config/mopidy/mopidy.conf</code>. Check out <a href=\"https://github.com/brettinternet/dotfiles/blob/master/.config/mopidy/mopidy.conf\">my config here</a>. The key component I wrestled with here was the split audio output.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>audio<span class=\"token punctuation\">]</span>\noutput <span class=\"token operator\">=</span> <span class=\"token function\">tee</span> <span class=\"token assign-left variable\">name</span><span class=\"token operator\">=</span>t t. <span class=\"token operator\">!</span> queue <span class=\"token operator\">!</span> autoaudiosink t. <span class=\"token operator\">!</span> queue <span class=\"token operator\">!</span> audioresample <span class=\"token operator\">!</span> audioconvert <span class=\"token operator\">!</span> audio/x-raw,rate<span class=\"token operator\">=</span><span class=\"token number\">44100</span>,channels<span class=\"token operator\">=</span><span class=\"token number\">2</span>,format<span class=\"token operator\">=</span>S16LE <span class=\"token operator\">!</span> wavenc <span class=\"token operator\">!</span> filesink <span class=\"token assign-left variable\">location</span><span class=\"token operator\">=</span>/tmp/mpd.fifo</code></pre></div>\n<p>Using a tee gstreamer element, weâ€™re able to use two audio outputs. Check out Mopidyâ€™s documentation for <a href=\"https://docs.mopidy.com/en/latest/audio/\">advanced audio setups</a> for more details.</p>\n<p>You may have also noticed <code class=\"language-text\">spotify_tunigo</code> in the <code class=\"language-text\">mopidy.conf</code> below the Spotify options. <a href=\"https://github.com/trygveaa/mopidy-spotify-tunigo\">Spotify Tunigo</a> letâ€™s you browser Spotifyâ€™s curated playlists and checkout new music.</p>\n<p>Install Spotify Tunigo:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">pip install Mopidy-Spotify-Tunigo</code></pre></div>\n<p>Itâ€™s also important to note the Spotify settings in <code class=\"language-text\">mopidy.conf</code>. Storing passwords in plaintext is bad. Thereâ€™s a current work-around with python and <a href=\"https://github.com/mopidy/mopidy/issues/116#issuecomment-18026012\">an open issue</a> to improve this. Of course, itâ€™s always best practice to use unique passwords for everything.</p>\n<p>Now letâ€™s run <code class=\"language-text\">mopidy</code> to make sure you donâ€™t get any errors. When I set up mine on macOS, I had a python error about a missing libspotify framework in <code class=\"language-text\">/Library/Frameworks</code>. If you get this error, simply run <code class=\"language-text\">brew info libspotify</code> to see where homebrew has installed your libspotify package. Create a folder in <code class=\"language-text\">/Library/Frameworks</code> called <code class=\"language-text\">libspotify.framework</code>, then create a symlink in <code class=\"language-text\">/Library/Frameworks/libspotify.framework</code> with:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">ln -s /usr/local/Cellar/libspotify/12.1.51/lib/libspotify /Library/Frameworks/libspotify.framework/libspotify</code></pre></div>\n<p>Once youâ€™ve confirmed there arenâ€™t any runtime errors, you can now run mopidy as a service.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">brew services start mopidy</code></pre></div>\n<p>Now letâ€™s run <code class=\"language-text\">ncmpcpp</code>. Jump to the music browser with <code class=\"language-text\">2</code> and pick some Spotify tracks to play on the current playlist queue. <code class=\"language-text\">8</code> will take you to ncmpcppâ€™s visualizer. If youâ€™ve install <a href=\"https://github.com/dpayne/cli-visualizer\">cli-visualizer</a> you can run it with <code class=\"language-text\">vis</code>. Here are some of my preferred settings in <code class=\"language-text\">./config/vis/config</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">visualizer.spectrum.top.margin=0.30\naudio.stereo.enabled=false</code></pre></div>\n<p>Some problems Iâ€™m working through with this setup: I noticed that when I change tracks or pause/stop and then resume playback in ncmpcpp, the cli-visualizer wonâ€™t resume animation.</p>\n<p>My next task is to get the cli-visualizer output to work on my macâ€™s desktop as an <a href=\"http://tracesof.net/uebersicht/\">Ubersicht</a> widget.</p>","frontmatter":{"title":"Play and Visualize Spotify Music in Terminal with Mopidy and Ncmpcpp","date":"March 02, 2017","tags":["music","cli"]}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/play-and-visual-spotify-music-in-terminal/","previous":null,"next":{"fields":{"slug":"/build-a-hackintosh/"},"frontmatter":{"title":"Building a Hackintosh","tags":["hackintosh"]}}}}}