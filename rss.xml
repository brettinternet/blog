<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>brettinternet</title>
        <link>https://brettinternet.com</link>
        <description>stories from data &amp; technology</description>
        <lastBuildDate>Fri, 09 Feb 2018 00:00:00 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/brettinternet/brettinternet.github.io</generator>
        <language>en</language>
        <copyright>brett</copyright>
        <atom:link href="https://brettinternet.com/rss" rel="self" type="application/rss+xml"/>
        <item>
            <title><![CDATA[Elbakyan is a heroine for modern science]]></title>
            <link>https://brettinternet.com/elbakyan-is-a-heroine/</link>
            <guid>https://brettinternet.com/elbakyan-is-a-heroine/</guid>
            <pubDate>Fri, 09 Feb 2018 00:00:00 GMT</pubDate>
            <description><![CDATA[Make publicly funded research free]]></description>
            <content:encoded><![CDATA[<div><p>A popular <a href="https://www.theverge.com/2018/2/8/16985666/alexandra-elbakyan-sci-hub-open-access-science-papers-lawsuit">article</a> was recently published about the history of Alexandra Elbakyan’s Sci-Hub, a website that makes academic journal papers free to everyone. It’s a controversial topic following last year’s civil litigation by two major publishers, Elsevier and the American Chemical Society. Most recently, Cloudfare responded to the court’s injunction by <a href="https://twitter.com/Sci_Hub/status/959702088543539200">terminating service</a> to Sci-Hub’s domains (<a href="https://torrentfreak.com/cloudflare-terminates-service-to-sci-hub-domain-names-180205/">this</a> brings up additional ethical concern). Meanwhile, Sci-Hub dances away out of reach by staying available on other domain names inaccessible to the US without a VPN.</p>
<p>Alexandra has become somewhat of a Martin Luther of science. Except her <em>Ninety-five Theses</em> is instead a database of 64 million academic papers in PDF. Her work makes science more accessible to the laity, instead of a submission to the interpretation and approval of academics from high-status institutions. My own Bachelor of Science makes me nervous about the implications of lay folk making decisions based on studies perused without understanding rigorous philosophies of science. However, this is an unavoidable aspect already being carried out by the shallow community of anti-science, FDA-approved pill pushers and social influencers with their online degrees and beauty blogs. But imagine a different scene of coffee shop discussions of fruit fly sleep cycles or dinner table deliberation over neuronal action potential.</p>
<p>Paywalls and walled gardens for publications with insurmountable price tags make learning an exclusive, invite-only process for elite institutions. The effects of Reverend Luther’s translations of the bible to the German vernacular had tremendous impact on both religious <em>and</em> cultural contexts. With Sci-Hub making scientific studies more widely available, I wonder if these academic papers could receive the same widespread scrutiny that open source code receives from the developer community. Even rigorous disciplines receive contributions from amateur enthusiasts, like the hobbyist who recently <a href="https://skyriddles.wordpress.com/2018/01/21/nasas-long-dead-image-satellite-is-alive/">found NASA’s lost satellite</a>.</p>
<p>I am convinced that this is not primarily an economic issue but a moral one. While we’re bombarded with an endless stream of media in this digital era (like a <a href="http://nautil.us/issue/52/the-hive/modern-media-is-a-dos-attack-on-your-free-will">DoS attack on our attention</a>), what effect would open discussions of empirical sources have on the quality of our media consumption, and even the advancement of our society? This is all a bit idealistic, but imagine this: a new generation of young scientists with the democratization of evidence-based persuasion. Taxpayers should have access to the research they paid for. Publishers hoard and monetize public research, but hopefully not for long.</p>
</div>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Building a Hackintosh]]></title>
            <link>https://brettinternet.com/build-a-hackintosh/</link>
            <guid>https://brettinternet.com/build-a-hackintosh/</guid>
            <pubDate>Sun, 23 Apr 2017 00:00:00 GMT</pubDate>
            <description><![CDATA[PC hardware + macOS]]></description>
            <content:encoded><![CDATA[<div><img src="https://brettinternet.com/images/bc990566d1b1fed53256a65d919a183b-584.png" alt="System specifications">
<p>Apple’s overpriced offering is moving away from modular, upgradable hardware. Some recent unveils of the iMac, Mac Pro, and MacBook Pro failed to meet the expectations of many professionals that demand improved specifications. Using the more powerful hardware available with macOS can be the ultimate environment for a developer—Unix coupled with strong machinery. For example, at the time of writing this, I’m on my Kaby Lake build, but current Apple hardware doesn’t offer the newest Intel generation. This is currently experimental in the community, but more stable options do exist with Skylake hardware.</p>
<p>I first started developing on a MacBook. There are aspects of Apple’s laptops that other hardware manufactures have not been able to match for me quite yet. But as for a desktop where form factor, sleek aluminum design, and the responsive trackpad are not concerns, then a Hackintosh is the way to go for tabletop computing.</p>
<p>Should you build a hackintosh? Probably not. It’s a breach of Apple’s macOS Terms and Conditions and they <a href="https://en.wikipedia.org/wiki/Psystar_Corporation">have sued companies</a> that attempt to turn a profit. However, Apple has been kind and <a href="https://www.reddit.com/r/hackintosh/comments/2ek35g/is_it_technically_illegal/">hasn’t litigated individuals</a>. Building a Hackintosh involves a <em>lot</em> of troubleshooting and tinkering. But if you’re okay with all of this, then try it out! The first place to start is to begin lurking in the community (<a href="https://reddit.com/r/hackintosh">/r/hackintosh</a>).</p>
<p>I’ve posted a <a href="https://github.com/brettinternet/hackintosh/blob/8788216554bf169d0f7eff2581ab372e14ce3b2b/docs/setup.md">guide to my most recent build</a> where I use the latest Kaby Lake Intel processor and the latest mobo. I use an NVMe SSD, bluetooth accessories, iMessage, and other necessary features. My passion for Hackintosh fluctuates with my availability, but you can see my builds, guides and troubleshooting research at <a href="https://github.com/brettinternet/hackintosh">brettinternet/hackintosh</a>.</p>
<hr>
<p><strong>Feb 2019 update</strong>: Proprietary software can be frustrating and in privacy matters and developer support Apple appears to be straying further from the light. I’ve archived my personal Hackintosh project and moved on to <a href="https://github.com/brettinternet/linux">Linux</a>.</p>
</div>]]></content:encoded>
            <enclosure length="0" type="image/png" url="https://brettinternet.com/images/bc990566d1b1fed53256a65d919a183b-584.png" title="system information"/>
        </item>
        <item>
            <title><![CDATA[Manage notes with markdown and git]]></title>
            <link>https://brettinternet.com/managing-notes-with-markdown-and-git/</link>
            <guid>https://brettinternet.com/managing-notes-with-markdown-and-git/</guid>
            <pubDate>Mon, 06 Feb 2017 00:00:00 GMT</pubDate>
            <description><![CDATA['Everything not saved will be lost.']]></description>
            <content:encoded><![CDATA[<div><p>In school, to keep up with my peers, I took meticulous notes. I read and reread assignments, and I constantly evaluated my priorities to stay on task. I became obsessed with managing my productivity. I’ve used feature-rich apps like OmniFocus or Wunderlist and simpler tools like Apple Reminders.</p>
<p>For a while I used Evernote for note-taking, then I tried OneNote, Apple Notes and even Google Keep. I left Evernote because they’d seemed to have lost their way with gimmicky features. I liked that OneNote didn’t force-feed a premium option and it was just as accessible as Evernote.
Later, I thought that maybe Apple Notes would be just enough for me, but I eventually found that it wasn’t better for anything other than lists or using the touch draw feature.</p>
<p>Now as a developer, I use markdown in my text editor. This process for note-taking certainly isn’t novel – you’ll even find books on GitHub written with markdown. Markdown offers the most formatting versatility, especially to display code excerpts with syntax highlighting and quickly reference links, create lists, and break notes out by sections. This is especially true since <a href="https://github.github.com/gfm/">GitHub’s flavoring</a> and small enhancements have made markdown previewing so accessible. Even this blog is made using markdown.</p>
<h3 id="markdown">Markdown</h3>
<p>I love markdown. I like how widely support it is, and I like how clear markdown format is to convey information. Markdown has become the ubiquitous plain text format for the GitHub community. My own blog posts are written in markdown (<a href="https://github.com/brettinternet/brettinternet.github.io/">brettinternet.github.io</a>).
Composing markdown is a timeless method that isn’t married any third party tools except a modern text editor (which isn’t going anywhere).</p>
<p>It’s true, this method isn’t perfect. I need separate tools for sketches and PDF markups. But these mediums make up about 0.5% of all my notes. I just use my NextCloud for storing files or Keybase for my public documents.</p>
<p><a href="https://githubengineering.com/a-formal-spec-for-github-markdown/">Some recent specification</a> has been proposed to standardize Github’s flavor of markdown. One of my favorite introductions to markdown can be found <a href="http://commonmark.org/">here</a>. Commonmark was put together by a few representatives of some major companies that use markdown like GitHub, Reddit, and Stack Exchange. Some nonconforming markdown features have added some very nice features such as task lists, autolinking, diff and code block improvements.</p>
<h3 id="git">Git</h3>
<p>Right now I have a <s>BitBucket</s> separate GitHub repo for my private notes and another for my <a href="https://github.com/brettinternet/public-notes">public notes</a>. Eventually, I’d like to self-host my own GitLab within <a href="https://github.com/brettinternet/homelab">my homelab</a>.</p>
<p>My commit messages are short, but I attempt to make them meaningful so I can see my note history and refer back to find deleted excerpts. I also use <a href="https://github.com/brettinternet/dotfiles/blob/master/.aliases">aliases</a> for git commands to make pushing to master very fast.</p>
<h3 id="desktop">Desktop</h3>
<p>I use Vim and VS Code. To me, taking notes in my editor environment is the best possible scenario since I’m most comfortable with the shortcuts. VS Code offers a markdown previewer out of the box with <code>ctrl</code> + <code>shift</code> + <code>v</code>. Markdown’s lifespan on desktop will exceed my own, so I’m no longer bound to an app’s survival on a platform to access my notes.</p>
<p><a href="https://github.com/ShareX/ShareX">ShareX</a> is a good option for screenshots on PC or <a href="https://wiki.archlinux.org/index.php/Flameshot">Flameshot</a> or <a href="https://www.gimp.org/downloads/">GIMP</a> on Linux. I tend to think that a simple bookmark is better than web clippings. EverNote certainly has the strongest clipper, and I do like that OneNote’s web clipper is <a href="https://blogs.msdn.microsoft.com/onenotedev/2016/08/31/the-web-clipper-goes-open-source/">open source</a>.</p>
<h3 id="mobile">Mobile</h3>
<p>Before I found <a href="https://workingcopyapp.com/">Working Copy</a>, a solid mobile git solution for iOS was <em>the</em> missing piece for keeping notes in a git repository. I’m sure there are equally polished options on Android. With Working Copy you can fetch repos for free, but you’ll have to pay to unlock push. The app is very polished, so I think it’s worth it to support this developer. SSH keys are supported, language highlighting and markdown and plain text previews. It’s an excellent mobile option for iOS.</p>
<h3 id="save-menu">Save Menu</h3>
<blockquote>
<p>Everything not saved will be lost.</p>
<p>- <em>Nintendo “Quit Screen” message</em></p>
</blockquote>
<p>Like an accessible save menu, I keep everything in markdown. I record docker commands and obscure command-line arguments, JavaScript toy problems, or directions to setup Postgres permissions. I also <a href="https://github.com/brettinternet/hugo-slides">create slides</a> with markdown. I’ll only make a note of something if it’s easier to reference my notes than it is to <a href="/blog/becoming-a-professional-googler">Google search it</a>. I also take notes to help out the students that I mentor. You can checkout my <a href="https://github.com/brettinternet/public-notes">public notes</a> on GitHub but you can’t see my private ones 😉.</p>
<p>I use a combination of Apple Reminders and private GitHub issues with task lists for short term personal tasks, and GitHub Projects to visualize Kanban project and portfolio management. But for notes, I like good ol’ fashioned git and markdown. I use a private repository for my personal notes, and a separate repo for my public notes. I believe this method is the strongest embrace of trustworthy technology. Git and markdown are two timeless tools that are sure to be around for a long time.</p>
<hr>
<div class="bg-indigo-100 p-6 rounded-md">
<p><strong>June 2020 update</strong>: As of this year, I have begun experimenting with a much simpler approach for tracking work-in-progress: <code>todo.txt</code>. More on this to come.</p>
</div>
</div>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Play and visualize Spotify music in terminal with mopidy and ncmpcpp]]></title>
            <link>https://brettinternet.com/play-and-visual-spotify-music-in-terminal/</link>
            <guid>https://brettinternet.com/play-and-visual-spotify-music-in-terminal/</guid>
            <pubDate>Tue, 07 Jun 2016 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<div><p>Like Winamp, ncmpcpp is timeless classic for music applications. As I’ve picked up my work and slowly moved into the command-line space, I’ve found ncmpcpp very easy to use. <a href="https://wiki.archlinux.org/index.php/ncmpcpp">Ncmpcpp</a> is an mpd client and coupled with Mopidy I can browse Spotify playlists, search for artists, and play top tracks.</p>
<pre class="language-bash"><code class="language-bash">brew <span class="token function">install</span> ncmpcpp</code></pre>
<p>My latest endeavor with managing my music on the CLI has been to use a visualizer like <a href="https://github.com/dpayne/cli-visualizer">cli-visualizer</a> or even ncmpcpp’s native visualization. It’s a fairly simple setup that’s been around for a while with a standard mpd and mpd client like ncmpcpp. However, to use an mpd client with a streaming service like Spotify or Soundcloud, you have to use a service like Mopidy.</p>
<h2 id="without-spotify">Without Spotify</h2>
<p>If you don’t stream music, you’re able to stick with a normal <a href="https://wiki.archlinux.org/index.php/Music_Player_Daemon">mpd</a> setup.</p>
<pre class="language-bash"><code class="language-bash">brew <span class="token function">install</span> mpd</code></pre>
<p>Using a Music Player Daemon to serve audio has been around for a while, so I won’t get into this. Make sure you setup the entire config correctly, however, I’ll highlight a key element here: the two audio outputs. The visualizers both in ncmpcpp and in cli-visualizer need the <code>fifo</code> audio output to work:</p>
<pre class="language-bash"><code class="language-bash">audio_output <span class="token punctuation">{</span><br>  <span class="token builtin class-name">type</span>                  <span class="token string">"fifo"</span><br>  name                  <span class="token string">"my_fifo"</span><br>  path                  <span class="token string">"/tmp/mpd.fifo"</span><br>  <span class="token function">format</span>                <span class="token string">"44100:16:2"</span><br><span class="token punctuation">}</span></code></pre>
<p>And macOS uses CoreAudio for it’s sound hardware output, so we’ll add another output:</p>
<pre class="language-bash"><code class="language-bash">audio_output <span class="token punctuation">{</span><br>  <span class="token builtin class-name">type</span>                  <span class="token string">"osx"</span><br>  name                  <span class="token string">"CoreAudio"</span><br>  mixer_type            <span class="token string">"software"</span><br><span class="token punctuation">}</span></code></pre>
<h2 id="with-spotify">With Spotify</h2>
<p>Install <a href="https://github.com/mopidy">Mopidy</a> and Mopidy-Spotify. They have additional plugins for other streaming services.</p>
<pre><code>brew install mopidy mopidy-spotify
</code></pre>
<p>Run <code>mopidy</code> once so the default config files are created. On macOS the config is <code>~/.config/mopidy/mopidy.conf</code>. Check out <a href="https://github.com/brettinternet/dotfiles/blob/master/.config/mopidy/mopidy.conf">my config here</a>. The key component I wrestled with here was the split audio output.</p>
<pre class="language-bash"><code class="language-bash"><span class="token punctuation">[</span>audio<span class="token punctuation">]</span><br>output <span class="token operator">=</span> <span class="token function">tee</span> <span class="token assign-left variable">name</span><span class="token operator">=</span>t t. <span class="token operator">!</span> queue <span class="token operator">!</span> autoaudiosink t. <span class="token operator">!</span> queue <span class="token operator">!</span> audioresample <span class="token operator">!</span> audioconvert <span class="token operator">!</span> audio/x-raw,rate<span class="token operator">=</span><span class="token number">44100</span>,channels<span class="token operator">=</span><span class="token number">2</span>,format<span class="token operator">=</span>S16LE <span class="token operator">!</span> wavenc <span class="token operator">!</span> filesink <span class="token assign-left variable">location</span><span class="token operator">=</span>/tmp/mpd.fifo</code></pre>
<p>Using a tee gstreamer element, we’re able to use two audio outputs. Check out Mopidy’s documentation for <a href="https://docs.mopidy.com/en/latest/audio/">advanced audio setups</a> for more details.</p>
<p>You may have also noticed <code>spotify_tunigo</code> in the <code>mopidy.conf</code> below the Spotify options. <a href="https://github.com/trygveaa/mopidy-spotify-tunigo">Spotify Tunigo</a> let’s you browser Spotify’s curated playlists and checkout new music.</p>
<p>Install Spotify Tunigo:</p>
<pre class="language-bash"><code class="language-bash">pip <span class="token function">install</span> Mopidy-Spotify-Tunigo</code></pre>
<p>It’s also important to note the Spotify settings in <code>mopidy.conf</code>. Storing passwords in plaintext is bad. There’s a current work-around with python and <a href="https://github.com/mopidy/mopidy/issues/116#issuecomment-18026012">an open issue</a> to improve this. Of course, it’s always best practice to use unique passwords for everything.</p>
<p>Now let’s run <code>mopidy</code> to make sure you don’t get any errors. When I set up mine on macOS, I had a python error about a missing libspotify framework in <code>/Library/Frameworks</code>. If you get this error, simply run <code>brew info libspotify</code> to see where homebrew has installed your libspotify package. Create a folder in <code>/Library/Frameworks</code> called <code>libspotify.framework</code>, then create a symlink in <code>/Library/Frameworks/libspotify.framework</code> with:</p>
<pre class="language-bash"><code class="language-bash"><span class="token function">ln</span> -s /usr/local/Cellar/libspotify/12.1.51/lib/libspotify /Library/Frameworks/libspotify.framework/libspotify</code></pre>
<p>Once you’ve confirmed there aren’t any runtime errors, you can now run mopidy as a service.</p>
<pre class="language-bash"><code class="language-bash">brew services start mopidy</code></pre>
<p>Now let’s run <code>ncmpcpp</code>. Jump to the music browser with <code>2</code> and pick some Spotify tracks to play on the current playlist queue. <code>8</code> will take you to ncmpcpp’s visualizer. If you’ve install <a href="https://github.com/dpayne/cli-visualizer">cli-visualizer</a> you can run it with <code>vis</code>. Here are some of my preferred settings in <code>./config/vis/config</code>:</p>
<pre class="language-bash"><code class="language-bash">visualizer.spectrum.top.margin<span class="token operator">=</span><span class="token number">0.30</span><br>audio.stereo.enabled<span class="token operator">=</span>false</code></pre>
<p>Some problems I’m working through with this setup: I noticed that when I change tracks or pause/stop and then resume playback in ncmpcpp, the cli-visualizer won’t resume animation.</p>
<p>My next task is to get the cli-visualizer output to work on my mac’s desktop as an <a href="http://tracesof.net/uebersicht/">Ubersicht</a> widget.</p>
</div>]]></content:encoded>
        </item>
    </channel>
</rss>