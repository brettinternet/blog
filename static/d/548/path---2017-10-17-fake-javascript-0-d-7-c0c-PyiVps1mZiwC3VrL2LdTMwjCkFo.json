{"data":{"site":{"siteMetadata":{"title":"brettinternet","author":"@brettinternet"}},"markdownRemark":{"id":"8cb9c35e-4a4c-5d3f-8759-bfd2a158876b","excerpt":"Happy October! Welcome to the JavaScript House of Horror. Here lies hacky, unconventional, or just uncommon JavaScript prose. This is post is not recommended…","html":"<p>Happy October! Welcome to the JavaScript House of Horror. Here lies hacky, unconventional, or just uncommon JavaScript prose. This is post is not recommended for small children, the highly-opinionated or ill-tempered.</p>\n<h2>Error handling</h2>\n<p>Skip Google and get answers immediately.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n  something\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  window<span class=\"token punctuation\">.</span>location<span class=\"token punctuation\">.</span>href <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token string\">\"http://stackoverflow.com/search?q=[js]+\"</span> <span class=\"token operator\">+</span>\n    e<span class=\"token punctuation\">.</span>message\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>This <em><em>innovative</em></em> solution was first suggested <a href=\"https://twitter.com/DivineOmega/status/695744177557106688\">here</a>.</p>\n<p>Of course, the easy way out would be to handle errors like this globally:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">window.onerror = e =&gt; window.location.href = &quot;http://stackoverflow.com/search?q=[js ]+&quot;+e.message</code></pre></div>\n<p>Also, don’t forget to use <code class=\"language-text\">encodeURIComponent(e.message)</code> before you implement this ✨<em>feature</em>✨ in production.</p>\n<h2>Bracket magic</h2>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">++</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token operator\">+</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">+</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token comment\">// returns \"10\"</span></code></pre></div>\n<p>See a thorough explanation <a href=\"https://stackoverflow.com/a/7202287/6817437\">here</a>.</p>\n<h2>JSF*ck</h2>\n<p>Run the code <a href=\"https://repl.it/Kiwu/0\">here</a>.</p>\n<p>Here are the basic building blocks for <a href=\"http://www.jsfuck.com/\">JSF*ck</a>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">!</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">===</span> <span class=\"token boolean\">false</span>\n<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">+</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">===</span> <span class=\"token string\">\"\"</span>\n<span class=\"token operator\">!</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">+</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">===</span> <span class=\"token string\">\"false\"</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">+[] === 0</code></pre></div>\n<p>So imagine that we can stringify JavaScript return values like ‘undefined’ and ‘true’. And with numeric values, we can extract specific index values from these words. <a href=\"http://www.jazcash.com/a-javascript-journey-with-only-six-characters/\">This</a> is a more thorough explanation.</p>\n<p>Here’s a similar one: Emoticons or JavaScript?</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">ﾟωﾟﾉ= /｀ｍ´）ﾉ ~┻━┻   //*´∇｀*/ [&#39;_&#39;]; o=(ﾟｰﾟ)  =_=3; c=(ﾟΘﾟ) =(ﾟｰﾟ)-(ﾟｰﾟ); (ﾟДﾟ) =(ﾟΘﾟ)= (o^_^o)/ (o^_^o);(ﾟДﾟ)={ﾟΘﾟ: &#39;_&#39; ,ﾟωﾟﾉ : ((ﾟωﾟﾉ==3) +&#39;_&#39;) [ﾟΘﾟ] ,ﾟｰﾟﾉ :(ﾟωﾟﾉ+ &#39;_&#39;)[o^_^o -(ﾟΘﾟ)] ,ﾟДﾟﾉ:((ﾟｰﾟ==3) +&#39;_&#39;)[ﾟｰﾟ] }; (ﾟДﾟ) [ﾟΘﾟ] =((ﾟωﾟﾉ==3) +&#39;_&#39;) [c^_^o];(ﾟДﾟ) [&#39;c&#39;] = ((ﾟДﾟ)+&#39;_&#39;) [ (ﾟｰﾟ)+(ﾟｰﾟ)-(ﾟΘﾟ) ];(ﾟДﾟ) [&#39;o&#39;] = ((ﾟДﾟ)+&#39;_&#39;) [ﾟΘﾟ];(ﾟoﾟ)=(ﾟДﾟ) [&#39;c&#39;]+(ﾟДﾟ) [&#39;o&#39;]+(ﾟωﾟﾉ +&#39;_&#39;)[ﾟΘﾟ]+ ((ﾟωﾟﾉ==3) +&#39;_&#39;) [ﾟｰﾟ] + ((ﾟДﾟ) +&#39;_&#39;) [(ﾟｰﾟ)+(ﾟｰﾟ)]+ ((ﾟｰﾟ==3) +&#39;_&#39;) [ﾟΘﾟ]+((ﾟｰﾟ==3) +&#39;_&#39;) [(ﾟｰﾟ) - (ﾟΘﾟ)]+(ﾟДﾟ) [&#39;c&#39;]+((ﾟДﾟ)+&#39;_&#39;) [(ﾟｰﾟ)+(ﾟｰﾟ)]+ (ﾟДﾟ) [&#39;o&#39;]+((ﾟｰﾟ==3) +&#39;_&#39;) [ﾟΘﾟ];(ﾟДﾟ) [&#39;_&#39;] =(o^_^o) [ﾟoﾟ] [ﾟoﾟ];(ﾟεﾟ)=((ﾟｰﾟ==3) +&#39;_&#39;) [ﾟΘﾟ]+ (ﾟДﾟ) .ﾟДﾟﾉ+((ﾟДﾟ)+&#39;_&#39;) [(ﾟｰﾟ) + (ﾟｰﾟ)]+((ﾟｰﾟ==3) +&#39;_&#39;) [o^_^o -ﾟΘﾟ]+((ﾟｰﾟ==3) +&#39;_&#39;) [ﾟΘﾟ]+ (ﾟωﾟﾉ +&#39;_&#39;) [ﾟΘﾟ]; (ﾟｰﾟ)+=(ﾟΘﾟ); (ﾟДﾟ)[ﾟεﾟ]=&#39;\\\\&#39;; (ﾟДﾟ).ﾟΘﾟﾉ=(ﾟДﾟ+ ﾟｰﾟ)[o^_^o -(ﾟΘﾟ)];(oﾟｰﾟo)=(ﾟωﾟﾉ +&#39;_&#39;)[c^_^o];(ﾟДﾟ) [ﾟoﾟ]=&#39;\\&quot;&#39;;(ﾟДﾟ) [&#39;_&#39;] ( (ﾟДﾟ) [&#39;_&#39;] (ﾟεﾟ+(ﾟДﾟ)[ﾟoﾟ]+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟΘﾟ)+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟΘﾟ)+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) - (ﾟΘﾟ))+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟoﾟ]) (ﾟΘﾟ)) (&#39;_&#39;);</code></pre></div>\n<p>Run the <a href=\"https://repl.it/Kion/1\">code here</a> or check out the <a href=\"http://utf-8.jp/public/aaencode.html\">encoder</a>.</p>\n<p>However, don’t fall in love with brackets just yet. Comparing array equality should break your spirits:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">[] == &#39;&#39;   // true\n[] == 0    // true\n[&#39;&#39;] == &#39;&#39; // true\n[0] == 0   // true\n[0] == &#39;&#39;  // false\n[&#39;&#39;] == 0  // true\n\n[null] == &#39;&#39;      // true\n[null] == 0       // true\n[undefined] == &#39;&#39; // true\n[undefined] == 0  // true\n\n[[]] == 0  // true\n[[]] == &#39;&#39; // true\n\n[[[[[[]]]]]] == &#39;&#39; // true\n[[[[[[]]]]]] == 0  // true\n\n[[[[[[ null ]]]]]] == 0  // true\n[[[[[[ null ]]]]]] == &#39;&#39; // true\n\n[[[[[[ undefined ]]]]]] == 0  // true\n[[[[[[ undefined ]]]]]] == &#39;&#39; // true</code></pre></div>\n<p>The ECMA spec describes this behavior in <a href=\"https://www.ecma-international.org/ecma-262/#sec-abstract-equality-comparison\">Abstract Equality Comparison</a>.</p>\n<h2>JavaScript Labyrinth</h2>\n<p data-height=\"265\" data-theme-id=\"light\" data-slug-hash=\"JyVBQx\" data-default-tab=\"result\" data-user=\"brettinternet\" data-embed-version=\"2\" data-pen-title=\"JavaScript Labyrinth\" class=\"codepen\">See the Pen <a href=\"https://codepen.io/brettinternet/pen/JyVBQx/\">JavaScript Labyrinth</a> by Brett (<a href=\"https://codepen.io/brettinternet\">@brettinternet</a>) on <a href=\"https://codepen.io\">CodePen</a>.</p>\n<script async src=\"https://production-assets.codepen.io/assets/embed/ei.js\"></script>\n<h2>isPrime()</h2>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">isPrime</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">n</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token operator\">!</span><span class=\"token regex\">/^.?$|^(..+?)\\1+$/</span><span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">repeat</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><a href=\"https://iluxonchik.github.io/regular-expression-check-if-number-is-prime/\">Here</a> is an explanation of a similar solution with a regular expression.</p>\n<h2>Draw the box model on a webpage</h2>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">;</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token function\">$$</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"*\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  a<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>outline <span class=\"token operator\">=</span> <span class=\"token string\">\"1px solid #\"</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">~</span><span class=\"token operator\">~</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">24</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p><img src=\"/images/fakejs-1.png\" alt=\"box model from js input\"></p>\n<p>The code above is essentially translated into:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token class-name\">Array</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>\n  document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelectorAll</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"*\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token parameter\">dom</span> <span class=\"token operator\">=></span>\n    <span class=\"token punctuation\">(</span>dom<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>outline <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token string\">`1px solid #</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>\n      Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">pow</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">24</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">`</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span></code></pre></div>\n<h2>Generate a random string</h2>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"d37a43dda9777\"</span>\nMath<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token number\">36</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"plwldktp48\"</span></code></pre></div>\n<h2>Make a deep copy object</h2>\n<p>Because objects are reference types, referencing an object to a new variable and changing the object referenced by that variable will still alter the original object. However, here’s an unorthodox way to deep copy that object to a new space in memory.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  a<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n  b<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> c<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> d<span class=\"token punctuation\">:</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">var</span> b <span class=\"token operator\">=</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span><span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h2>Implicit type conversions</h2>\n<p>Here’s a good example of type conversion without using <code class=\"language-text\">Number</code>, <code class=\"language-text\">parseInt</code> and <code class=\"language-text\">parseFloat</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> <span class=\"token string\">\"1\"</span> <span class=\"token operator\">+</span> a <span class=\"token comment\">// 1</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span><span class=\"token number\">0.0000004</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token number\">4</span> <span class=\"token comment\">// true</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">;</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">]</span> <span class=\"token comment\">// '1,2,34,5,6'</span></code></pre></div>\n<p>Here the concatenation essentially works <code class=\"language-text\">.toString()</code> on each of the arrays including the values and the comma separators, and then works <code class=\"language-text\">&quot;1,2,3&quot; + &quot;4,5,6&quot;</code>.</p>\n<p>Concatenation has additional silly behavior with the <code class=\"language-text\">+</code> operator. While <code class=\"language-text\">&quot;3&quot; - 1</code> is 2, <code class=\"language-text\">&quot;3&quot; + 1</code> is <code class=\"language-text\">&quot;31&quot;</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&quot;&quot; + &quot;&quot; // &quot;&quot;\n[] + [] // &quot;&quot;\n{} + [] // 0\n[] + {} // &quot;[object Object]&quot;\n{} + {} // &quot;[object Object][object Object]&quot;</code></pre></div>\n<p>So, concatenation depends on the types involved in the operation:</p>\n<ul>\n<li><code class=\"language-text\">Number + Number</code> :arrow_right: addition</li>\n<li><code class=\"language-text\">Boolean + Number</code> :arrow_right: addition</li>\n<li><code class=\"language-text\">Boolean + Boolean</code> :arrow_right: addition</li>\n<li><code class=\"language-text\">Number + String</code> :arrow_right: concatenation</li>\n<li><code class=\"language-text\">String + Boolean</code> :arrow_right: concatenation</li>\n<li><code class=\"language-text\">String + String</code> :arrow_right: concatenation</li>\n</ul>\n<p>There’s <a href=\"https://www.ecma-international.org/ecma-262/#sec-addition-operator-plus\">further reading</a> from the ECMA spec.</p>\n<h2>JavaScript floating point inaccuracies</h2>\n<p>1 + 2 is 3, right? Not with floating point values…</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token number\">0.1</span> <span class=\"token operator\">+</span> <span class=\"token number\">0.2</span> <span class=\"token operator\">==</span> <span class=\"token number\">0.3</span> <span class=\"token comment\">// false</span></code></pre></div>\n<p>Here, <code class=\"language-text\">0.1</code> and <code class=\"language-text\">0.2</code>are not accurate floating point representations, instead they evaluate to <code class=\"language-text\">0.30000000000000004</code>. This is essentially where it’s advantageous to set a predefined precision value with <code class=\"language-text\">Number.EPSILON</code> (<a href=\"https://stackoverflow.com/questions/5037839/avoiding-problems-with-javascripts-weird-decimal-calculations\">related</a>). Check out <a href=\"https://stackoverflow.com/questions/588004/is-floating-point-math-broken\">Is floating point math broken?</a> and <a href=\"http://0.30000000000000004.com/\">0.30000000000000004.com</a>.</p>\n<h2>Terse conditional assignment</h2>\n<p><code class=\"language-text\">var a = b &amp;&amp; 1</code> is the same as:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  a <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n  a <span class=\"token operator\">=</span> b\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">var a = b || 1</code> is the same as:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  a <span class=\"token operator\">=</span> b\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n  a <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>Types</h2>\n<h3>Document.all, an undefined object?</h3>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">document<span class=\"token punctuation\">.</span>all <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Object</span> <span class=\"token comment\">// true</span>\n<span class=\"token keyword\">typeof</span> document<span class=\"token punctuation\">.</span>all <span class=\"token comment\">// undefined</span></code></pre></div>\n<p>However…</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">document<span class=\"token punctuation\">.</span>all <span class=\"token operator\">===</span> <span class=\"token keyword\">undefined</span> <span class=\"token comment\">// false</span></code></pre></div>\n<p><a href=\"https://github.com/getify/You-Dont-Know-JS/blob/master/types%20&#x26;%20grammar/ch4.md#falsy-objects\">Here’s</a> an explanation of this obsolete feature, which used to be used to access DOM elements in older versions of IE.</p>\n<h3>To be a number or not</h3>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">typeof</span> <span class=\"token number\">NaN</span> <span class=\"token comment\">// number</span></code></pre></div>\n<h3>Strings aren’t Strings?</h3>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">typeof</span> <span class=\"token string\">\"str\"</span> <span class=\"token comment\">// \"string\"</span>\n<span class=\"token string\">\"str\"</span> <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">String</span> <span class=\"token comment\">// false</span></code></pre></div>\n<h2>true evaluated as 1</h2>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token boolean\">true</span> <span class=\"token operator\">+</span>\n  <span class=\"token boolean\">true</span><span class=\"token punctuation\">(</span>\n    <span class=\"token comment\">// 2</span>\n    <span class=\"token boolean\">true</span> <span class=\"token operator\">+</span> <span class=\"token boolean\">true</span>\n  <span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span>\n    <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span> <span class=\"token operator\">+</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span>\n  <span class=\"token boolean\">true</span> <span class=\"token comment\">// 3</span></code></pre></div>\n<p>When <code class=\"language-text\">true</code> is coerced to a number (<code class=\"language-text\">Number(true)</code>), it’s evaluated to a truthy value as <code class=\"language-text\">1</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token number\">1</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">2</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">3</span> <span class=\"token comment\">// true</span>\n<span class=\"token number\">3</span> <span class=\"token operator\">></span> <span class=\"token number\">2</span> <span class=\"token operator\">></span> <span class=\"token number\">1</span> <span class=\"token comment\">// false</span></code></pre></div>\n<p>The expression above is evaluated from left to right. Since <code class=\"language-text\">1 &lt; 2</code> is true, and true => 1 and <code class=\"language-text\">1 &lt; 3</code>, the first line is true. However, as true is evaluated in the second line, <code class=\"language-text\">1 &gt; 1</code> is false (<a href=\"https://www.ecma-international.org/ecma-262/#sec-relational-operators\">related</a>).</p>\n<h2>Functions invoked with backticks</h2>\n<p>First, set up a function that returns our arguments such that <code class=\"language-text\">fn(1, 2, 3)</code> returns <code class=\"language-text\">[1, 2, 3]</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>args</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> args\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">fn<span class=\"token template-string\"><span class=\"token string\">`first arg is an array </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token boolean\">true</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> separated by </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token number\">1</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> inserted values`</span></span>\n<span class=\"token comment\">// [ [ 'first arg is an array ', ' separated by ', ' inserted values' ],</span>\n<span class=\"token comment\">// true, 1]</span></code></pre></div>\n<p>This is the nature of <em><a href=\"https://www.ecma-international.org/ecma-262/#sec-tagged-templates\">Tagged template literals</a></em> and it’s the magic behind libraries like <a href=\"https://github.com/styled-components/styled-components\">styled-components</a>.</p>\n<h2>Try..catch</h2>\n<p>Will <code class=\"language-text\">1</code> or <code class=\"language-text\">2</code> be returned from the following expression?</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">1</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">2</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p><code class=\"language-text\">2</code> is returned. See <code class=\"language-text\">finally</code>’s role in the <code class=\"language-text\">try..catch</code> <a href=\"https://www.ecma-international.org/ecma-262/#sec-try-statement\">in the spec</a>.</p>\n<hr>\n<p>I hope you’re thoroughly frightened. Happy Halloween!</p>","frontmatter":{"title":"Fake Javascript: House of Horror","date":"October 11, 2017"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/2017-10-17-fake-javascript/","previous":{"fields":{"slug":"/2017-10-17-fake-javascript/"},"frontmatter":{"title":"Fake Javascript: House of Horror","draft":null}},"next":null}}